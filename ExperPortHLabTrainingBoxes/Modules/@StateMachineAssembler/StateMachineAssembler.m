% [sma]=StateMachineAssembler   An assembler for writing State Machine Matrices
%
% The StateMachineAssembler object is used to store State Machine matrix
% code (for the @RTLSM and the @SoftSMMarkII), as you build it; the code
% may have pointers and labels. Once completed, the assemble.m method
% disambiguates labels and builds a numeric state machine matrix. The
% send.m method assembles, calls the appropriate SetInputEvents.m,
% SetScheduledWaves.m, and SetOutputRouting.m for @RTLSM or @SoftSMMarkII,
% and then sends the assembled state matrix, ready for execution.
%
% See @StateMachineAssembler/Examples
%

% Written by Carlos Brody October 2006


function [sma] = StateMachineAssembler(inputarg)

   if nargin==0, inputarg = ''; end;
      
   if isa(inputarg, 'StateMachineAssembler'),
      sma = inputarg;
      return;
   end;

   default_input_map = { ...
     'Cin'    1   ; ...
     'Cout'   2   ; ...
     'Lin'    3   ; ...
     'Lout'   4   ; ...
     'Rin'    5   ; ...
     'Rout'   6   ; ...
     'Tup'    7   ; ...
   };
   
   default_self_timer_map = { ...
     'Timer'  8   ; ...
   };
   
   default_output_map = { ...
     'DOut'        9 ; ...
     'SoundOut'   10 ; ...
   };

   
   sma = struct( ...
     'input_map',           {default_input_map},  ...
     'self_timer_map',      {default_self_timer_map},  ...
     'output_map',          {default_output_map}, ...
     'state_name_list',     {cell(0,3)},   ...
     'current_state',       0,             ...
     'states',              zeros(0, 10),  ...
     'default_actions',     {cell(0, 1)},  ...
     'current_iti_state',   0,             ...
     'iti_states',          zeros(0, 10),  ..._
     'default_iti_actions', {cell(0, 1)},  ...
     'sched_waves',         struct('name', {}, 'id', {}, 'in_column', {}, ...
                                   'out_column', {}, 'dio_line', {}, ...
                                   'preamble', {}, 'sustain', {}, ...
                                   'refraction', {}), ...
     'pre35_curr_state', -1             ...
     );
   
   sma = class(sma, 'StateMachineAssembler');
   
   if ischar(inputarg),
      switch inputarg,
       case '',
       
       case 'no_dead_time_technology',
         sma = initialize_no_dead_time_structure(sma);

       case 'standard_state35_technology'
         error(sprintf(['Sorry, standard_state35_technology not ' ...
                        'implemented yet. Use no_dead_time_technology.\n']));
         % sma = initialize_standard_state35_structure(sma);      
       otherwise,
         error(sprintf(['Don''t know this flag for creating a ' ...
                        'StateMachineAssembler object: %s\n'], inputarg));
      end;
   end;
   
   return;
   
   