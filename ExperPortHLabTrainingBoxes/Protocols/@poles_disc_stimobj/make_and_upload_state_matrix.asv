function [] = make_and_upload_state_matrix(obj, action)

GetSoloFunctionArgs;


switch action
 case 'init'
   SoloParamHandle(obj, 'state_matrix');
   
   SoloParamHandle(obj, 'RealTimeStates', 'value', struct(...
     'wait_for_startlick', 0, ...  
     'poles_descend_and_sample', 0, ...  
     'wait_for_answerlick', 0, ... 
     'reward',  0, ...
     'extra_iti', 0,...
     'miss',0, ...
     'correct_nogo', 0, ...
     'poles_ascend', 0, ...
     'airpuff',0));
 
   SoloFunctionAddVars('RewardsSection', 'ro_args', 'RealTimeStates');
   
   make_and_upload_state_matrix(obj, 'next_matrix');
   return;
   
 case 'next_matrix',

   % ----------------------------------------------------------------------
   % - Set parameters used in matrix:
   % ----------------------------------------------------------------------
   
   wvid = 2^0;
   LEDid = 2^1;
   puffid = 2^4; % Airpuff valve ID.
   pvid = 2^5; % Pneumatic (Festo) valve ID.
   cmid = 2^7; % AOS hi speed camera trigger ID. 
   etid = 2^3; % EPHUS (electrophysiology) trigger ID.
   slid = 2^2; % Signal line for signaling trial numbers and fiducial marks.
   
   wvtm = WaterValveTime; % Defined in ValvesSection.m.  
   pfdr = 0.2; % Duration of airpuff.      
   eiti = ExtraITIOnError; % Defined in TimesSection.m.  
   sptm = SamplingPeriodTime;  % Defined in TimesSection.m. 
   
   % Compute answer period time as 2 sec minus SamplingPeriodTime (from TimesSection.m) , 
   % unless SamplingPeriodTime is > 1 s (for training purposes), in which case it is 1 sec.
   if value(SamplingPeriodTime)>1
       aptm = 1;
   else
       aptm = 2 - value(SamplingPeriodTime);
   end 
   SoloParamHandle(obj, 'AnswerPeriodTime', 'value', aptm); 
      
      
      
   % program starts in state 40
   stm = [0 0  40 0.01  0 0];
   stm = [stm ; zeros(40-rows(stm), 6)];
   stm(36,:) = [35 35  35 1   0 0];
   b = rows(stm); 

   RealTimeStates.wait_for_startlick = b; 
   RealTimeStates.poles_descend_and_sample = b+1;
   RealTimeStates.wait_for_answerlick = b+2;
   RealTimeStates.reward = b+3;
   RealTimeStates.extra_iti = b+5;
   RealTimeStates.miss = b+6;
   RealTimeStates.correct_nogo = b+7;
   RealTimeStates.poles_ascend = b+8;
   RealTimeStates.airpuff = b+9;                             
   
   next_side = SidesSection(obj, 'get_next_side');
   
   % ----------------------------------------------------------------------
   % - Build matrix:
   % ----------------------------------------------------------------------
   % Will use second pair of input channel columns to allow reading in whisker
   % position using EmbC readAI() function and also for recording scheduled
   % wave events.  Second channel will not allow built-in input event detection
   % because it will be disabled through use of a custom EmbC threshfunc.
   
%    swid=2^1;
   swid=2^1+2^2; 
               
   switch SessionTypeSection(obj,'get_session_type')
        
      case 'Water-Valve-Calibration' % STILL MUST UPDATE TO ADD 2 INPUT COLUMNS
             % On beam break (eg, by hand), trigger ndrops water deliveries
             % with delay second delays.
             ndrops = 100; delay = 1;
             openvalve = [b+1 b+1 b+2 wvtm wvid 0]; 
             closevalve = [b+1 b+1 b+2 delay 0 0];
             onecycle = [openvalve; closevalve];
             m = repmat(onecycle, ndrops, 1);    
             x = [repmat((0:(2*ndrops-1))',1,3) zeros(2*ndrops,3)];
             m = m+x; m = [b+1 b 35 999 0 0; m];
             m(end,3) = 35; stm = [stm; m];
             
       case 'Licking'
             onlk1 = RealTimeStates.reward(1);
              %Cin Cout Tup  Tim   Dou Aou  (Dou is bitmask format)
             stm = [stm ; 
                 onlk1   b  b    b    35  999    0     swid  ; ... % wait for lick  (This is state 40)
                 b+1   b+1  b+1  b+1  35  1      0     0  ; ... % irrelevant   
                 b+2   b+2  b+2  b+2  35  1      0     0  ; ... % irrelevant                               
                 b+3   b+3  b+3  b+3  35  wvtm  wvid   0  ; ... % reward
                 ];

       case 'Beam-Break-Indicator'
             stm = [stm ; 
                 b+1   b  b    b      35  999  0      0  ; ... 
                 b+1   b  b+1  b+1    35  999  LEDid  0  ; ...   
                 ];
                                  
       case 'Discrim'      
           %In1 Out1 In2 Out2 Tup  Tim   Dou  SW
           onlk1 = RealTimeStates.poles_descend_and_sample(1);
            if next_side=='r' % 'r' means a go trial.
                onlk2 = RealTimeStates.reward(1);
                tmout = RealTimeStates.miss(1);
            else                         
                onlk2 = RealTimeStates.airpuff(1);
                tmout = RealTimeStates.correct_nogo(1);
            end
           
            
            stm = [stm ; 
                b     b      b    b    101  .01   cmid+etid   0  ; ... % trigger camera and EPHUS; 10 ms later jump to state 101 to give trial num bit code. 
                b+1   b+1    b+1  b+1  b+2 sptm  pvid 0  ; ... % wait for poles to descend, wait duration of sampling period.  
                onlk2 onlk2  b+2  b+2  tmout aptm   pvid   0  ; ... % wait for lick for aptm seconds. 
                b+3   b+3    b+3  b+3  b+4  wvtm  pvid+wvid+slid 0  ; ... % give water - HIT. Give pulse on signal line too, for measuring clock drift.
                b+4   b+4    b+4  b+4  b+8  2-wvtm  pvid 0  ; ... % Time to drink after closing valve.
                b+9   b+5    b+5  b+5  b+8  eiti  pvid   0 ; ... % incorrect lick, airpuff + extra ITI - FALSE ALARM
                b+6   b+6    b+6  b+6  b+8  .001    pvid+slid    0  ; ... % didn't lick before timeout - MISS
                b+7   b+7    b+7  b+7  b+8  .001    pvid+slid    0  ; ... % correct nogo - CORRECT REJECTION
                b+8   b+8    b+8  b+8  35    .75    0       0  ; ... % raise poles by unsetting pvid, then go state 35 for new trial.
                b+9   b+9    b+9  b+9  b+5  pfdr    pvid+puffid+slid   0 ; ... % FALSE ALARM. Second extra ITI state, to retrigger extra ITI.
                ];
            
            %------ Signal trial number on digital output given by 'slid':
            % Requires that states 101 through 101+2*numbits be reserved
            % for giving bit signal.
        
            trialnum = n_done_trials + 1;
            
%             trialnum = 511; %63;
            % Should maybe make following 3 SPHs in State Machine Control
            % GUI:
            bittm = 0.002; % bit time
            gaptm = 0.005; % gap (inter-bit) time
            numbits = 10; %2^10=1024 possible trial nums
            
            
            x = dec2binvec(trialnum)'; 
            if length(x) < numbits 
                x = [x; repmat(0, [numbits-length(x) 1])];
            end
            % x is now 10-bit vector giving trial num, LSB first (at top).
            x(find(x)) = slid;
            
            % Insert a gap state between bits, to make reading bit pattern clearer:
            x=[x zeros(size(x))]';
            x=reshape(x,numel(x),1);
            
            y = (101:(100+2*numbits))';
            t = repmat([bittm; gaptm],[numbits 1]);
            m = [y y y y y+1 t x zeros(size(y))]; 
            m(end,3) = b+1; % jump back to state that triggers pole descent.
            
            stm = [stm; zeros(101-rows(stm),6)];
            stm = [stm; m];
               
            % AOS camera now does *not* need to save pre-trigger buffer.
            % Alternatively, if AOS camera can record signal events during
            % pretrial buffer, then maybe better to trigger with
            % pre-trigger buffer in order to make sure that
            % pre-pole-descent record time doesn't vary when trial signal
            % code is changed.
            %
            % Maybe put slid high at end of trial too to get fiducial marks
            % for clock slip correction.
             
        otherwise
            error('Invalid training session type')
    end
       
   stm = [stm; zeros(512-rows(stm),6)];


   rpbox('send_matrix', stm);
   state_matrix.value = stm;
   return;

   
 case 'reinit',
      % Delete all SoloParamHandles who belong to this object and whose
      % fullname starts with the name of this mfile:
      delete_sphandle('owner', ['^@' class(obj) '$'], ...
                      'fullname', ['^' mfilename]);

      % Reinitialise 
      feval(mfilename, obj, 'init');
   
   
 otherwise
   error('Invalid action!!');
   
end;

   